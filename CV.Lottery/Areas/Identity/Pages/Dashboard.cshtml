@page "/Dashboard"
@model DashboardModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["Title"] = "Dashboard";
    var userName = User.Identity?.Name ?? "";
    var pageNumber = Model.PageNumber;
    var totalPages = Model.TotalPages;
    var pageSize = Model.PageSize;
    var allEvents = Model.AllEvents;
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

@functions {
    public bool IsAdmin => Model.IsAdmin;
    public List<CV.Lottery.Areas.Identity.Pages.DashboardModel.EventSummary> AllEvents => Model.AllEvents;
}

<main class="flex-grow-1 d-flex flex-column bg-light" style="background: transparent;min-height: calc(100vh - 150px);">
    <div class="container-fluid flex-grow-1 d-flex flex-column justify-content-start align-items-center px-1 px-sm-3 px-md-4 py-3 py-md-4" style="padding-bottom: 24px;">
        <div class="row w-100 justify-content-center align-items-start gy-4">
            @if (IsAdmin)
            {
                <div class="col-12 p-0">
                    <div class="mb-0">
                        <!-- Admin dashboard: Header and Tiles only, grid removed as requested -->
                        <div class="row g-2 align-items-center mb-4">
                            <div class="col-12 col-lg-6 d-flex align-items-center gap-3 mb-2 mb-lg-0">
                                <h3 class="fw-bold mb-0">Dashboard</h3>
                            </div>
                            <div class="col-12 col-lg-6 d-flex justify-content-lg-end gap-2">
                                <a href="/Identity/EventCreate" class="btn btn-success d-inline-flex align-items-center px-4 py-2 shadow-sm" style="border-radius: 12px; font-weight: 600; font-size: 1.05rem;">
                                    <i class="bi bi-calendar-plus me-2"></i> <span class="d-inline">Add Event</span>
                                </a>
                            </div>
                        </div>
                        <!-- Admin LuckyDrawMaster Grid -->
                        <div class="card shadow-lg rounded-4 border-0 mb-4">
                            <div class="card-body p-3">
                                <div class="table-responsive">
                                    <table class="table table-hover align-middle mb-0">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Event Name</th>
                                                <th>Event Date</th>
                                                <th>Amount</th>
                                                <th>Status</th>
                                                <th>Winner Name</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.LuckyDrawEventsWithWinners)
                                            {
                                                var eventItem = item.Event;
                                                <tr>
                                                    <td style="max-width:220px; white-space:normal; word-break:break-word;">
            @eventItem.EventName
        </td>
                                                    <td class="js-utc-date" data-utc="@eventItem.EventDate?.ToString("yyyy-MM-ddTHH:mm:ssZ")"></td>
                                                    <td>@((decimal)eventItem.Amount)</td>
                                                    <td>
                                                        @if (eventItem.IsActive == true)
                                                        {
                                                            <span class="badge bg-success">Active</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">Inactive</span>
                                                        }
                                                    </td>
                                                    <td style="white-space:normal; word-break:break-word; max-width:180px;">@(item.WinnerNames != null && item.WinnerNames.Count > 0 ? string.Join(", ", item.WinnerNames) : "-")</td>
                                                    <td>
                                                        <form method="post" asp-page-handler="ToggleActive" asp-route-id="@eventItem.Id" class="d-inline">
                                                            <button type="submit" class="btn btn-sm @(eventItem.IsActive == true ? "btn-danger" : "btn-success")">
                                                                @(eventItem.IsActive == true ? "Deactivate" : "Activate")
                                                            </button>
                                                        </form>
                                                        <form method="get" action="/Identity/WinnerSelection" class="d-inline ms-2">
                                                            <input type="hidden" name="eventId" value="@eventItem.Id" />
                                                            <button type="submit" class="btn btn-sm btn-primary select-winner-btn" @(eventItem.IsActive != true ? "disabled data-inactive='true'" : "")>Select Winner</button>
                                                        </form>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <!-- End Admin LuckyDrawMaster Grid -->
                    </div>
                </div>
            }
            @if (!IsAdmin)
            {
                <!-- Event Message Bar -->
                <div class="col-12" style="margin-bottom: 0; padding-bottom: 0;">
                    @if (Model.WinnerAnnouncementDate.HasValue && Model.WinnerAnnouncementDate.Value > DateTime.Now)
                    {
                        <div class="alert alert-info d-flex align-items-center shadow-sm rounded-4 border-0 flex-wrap flex-md-nowrap text-center text-md-start mb-1" style="margin-bottom: 2px !important;" role="alert">
                            <i class="bi bi-calendar-event fs-4 text-primary me-3"></i>
                            <div>
                                Event Date: <strong class="js-utc-date" data-utc="@Model.WinnerAnnouncementDate?.ToString("yyyy-MM-ddTHH:mm:ssZ")"></strong>
                            </div>
                        </div>
                    }
                    else if (Model.WinnerAnnouncementDate.HasValue)
                    {
                        <div class="alert alert-success d-flex align-items-center shadow-sm rounded-4 border-0 flex-wrap flex-md-nowrap text-center text-md-start mb-1" style="margin-bottom: 2px !important;" role="alert">
                            <i class="bi bi-trophy fs-4 text-warning me-3"></i>
                            <div>
                                Winner: <strong>@Model.WinnerName</strong>
                            </div>
                        </div>
                    }
                </div>
                <!-- Responsive Event & Payment Details Cards -->
                <div class="row g-4 mt-0 pt-0" style="margin-top: 0 !important; padding-top: 0 !important;">
                    <div class="col-12 col-md-6 mb-3 mb-md-0">
                        <div class="card shadow-lg rounded-4 border-0 h-100">
                            <div class="card-body p-3 p-md-4">
                                <div class="d-flex align-items-center mb-2 mb-md-3 flex-column flex-sm-row text-center text-sm-start">
                                    <i class="bi bi-calendar-event fs-2 text-primary me-0 me-sm-3 mb-2 mb-sm-0"></i>
                                    <h3 class="fw-bold mb-0 fs-5 fs-md-4">Event Details</h3>
                                </div>
                                <div class="event-details-list">
                                    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start mb-2">
                                        <span class="text-muted fw-semibold">Event Name:</span>
                                        <span class="text-break text-end text-sm-start ms-sm-2">@Model.EventName</span>
                                    </div>
                                    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start mb-2">
                                        <span class="text-muted fw-semibold">Winner Announcement:</span>
                                        <span class="text-break text-end text-sm-start ms-sm-2">
                                            @if (Model.WinnerAnnouncementDate.HasValue)
                                            {
                                                <span class="js-utc-date" data-utc="@Model.WinnerAnnouncementDate?.ToString("yyyy-MM-ddTHH:mm:ssZ")"></span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-6 mb-3 mb-md-0">
                        <div class="card shadow-lg rounded-4 border-0 h-100">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center mb-2 mb-md-3 flex-column flex-sm-row text-center text-sm-start">
                                    <i class="bi bi-cash-coin fs-2 text-success me-0 me-sm-3 mb-2 mb-sm-0"></i>
                                    <h3 class="fw-bold mb-0 fs-5 fs-md-4">Payment Details</h3>
                                </div>
                                <div class="event-details-list flex-sm-row flex-wrap">
                                    <div class="d-flex flex-row justify-content-between align-items-center mb-2 w-100 flex-wrap">
                                        <span class="text-muted fw-semibold">Status:</span>
                                        <span class="text-break text-end text-sm-start ms-2">
                                            @if (!string.IsNullOrEmpty(Model.PaymentStatus))
                                            {
                                                if (Model.PaymentStatus == "Paid") {
                                                    <span class="badge bg-success">Paid</span>
                                                } else if (Model.PaymentStatus == "Failed") {
                                                    <span class="badge bg-danger">Failed</span>
                                                } else if (Model.PaymentStatus == "Pending") {
                                                    <span class="badge bg-warning text-dark">Pending</span>
                                                } else {
                                                    <span class="badge bg-secondary">@Model.PaymentStatus</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="d-flex flex-row justify-content-between align-items-center mb-2 w-100 flex-wrap">
                                        <span class="text-muted fw-semibold">Amount:</span>
                                        <span class="text-break text-end text-sm-start ms-2">@Model.Amount</span>
                                    </div>
                                    <div class="d-flex flex-row justify-content-between align-items-center mb-2 w-100 flex-wrap">
                                        <span class="text-muted fw-semibold">Transaction ID:</span>
                                        <span class="text-break text-end text-sm-start ms-2">@Model.TransactionId</span>
                                    </div>
                                    <div class="d-flex flex-row justify-content-between align-items-center mb-2 w-100 flex-wrap">
                                        <span class="text-muted fw-semibold">Paid On:</span>
                                        <span class="text-break text-end text-sm-start ms-2">
                                            @if (Model.PaidOn != null)
                                            {
                                                <span class="js-utc-date" data-utc="@Model.PaidOn?.ToString("yyyy-MM-ddTHH:mm:ssZ")"></span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</main>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Use toLocaleString to format UTC dates in browser's local time
    $(function () {
        $('.js-utc-date').each(function () {
            var utc = $(this).data('utc');
            if (utc) {
                // Fix: Replace all periods with colons in time portion for ISO 8601 compatibility
                var fixedUtc = utc.replace(/T(\d{2})\.(\d{2})\.(\d{2})Z/, function(_, h, m, s) {
                    return 'T' + h + ':' + m + ':' + s + 'Z';
                });
                var date = new Date(fixedUtc);
                if (!isNaN(date.getTime())) {
                    var options = {
                        year: 'numeric',
                        month: 'short',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: true
                    };
                    $(this).text(date.toLocaleString(undefined, options));
                } else {
                    $(this).text(utc);
                }
            }
        });
        // Show browser time
        var now = new Date();
        var options = {
            year: 'numeric', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: true
        };
        $('#browserTimeDisplay').text(now.toLocaleString(undefined, options));
    });
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.select-winner-btn[data-inactive="true"]').forEach(function(btn) {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            showToast('Please activate the event first.');
        });
    });
});
function showToast(message) {
    let toast = document.createElement('div');
    toast.className = 'toast align-items-center text-bg-warning border-0 position-fixed bottom-0 end-0 mb-4 me-4 show';
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    toast.style.zIndex = 1080;
    toast.style.minWidth = '260px';
    toast.innerHTML = `<div class='d-flex'><div class='toast-body'>${message}</div><button type='button' class='btn-close btn-close-white me-2 m-auto' data-bs-dismiss='toast' aria-label='Close'></button></div>`;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Show loader on initial page load
        document.addEventListener('DOMContentLoaded', function() {
            showLoader();
            window.addEventListener('load', function() {
                setTimeout(hideLoader, 100); // Small delay for smoothness
            });
        });
    </script>
}
